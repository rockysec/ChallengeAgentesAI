"""
Herramienta ofensiva: Comparaci√≥n de ACLs - An√≥nimo vs Admin LDAP
"""

import logging
from typing import Dict, Any, List
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()
logger = logging.getLogger(__name__)

def tool_acl_diff(admin_username: str = None, admin_password: str = None, base_dn: str = None, max_results: int = 100) -> Dict[str, Any]:
    """
    Compara lo que ve un bind an√≥nimo vs un bind autenticado admin para detectar diferencias en ACLs.
    
    Esta herramienta realiza dos an√°lisis LDAP paralelos:
    1. Bind an√≥nimo (-x) para ver permisos m√≠nimos
    2. Bind autenticado como admin para ver permisos m√°ximos
    
    Compara los resultados para detectar:
    - Diferencias en objetos visibles
    - Diferencias en atributos accesibles
    - Vulnerabilidades de control de acceso
    - Informaci√≥n sensible expuesta an√≥nimamente
    - Posibles escalaciones de privilegios
    
    Args:
        admin_username (str, optional): Usuario admin para autenticaci√≥n
        admin_password (str, optional): Contrase√±a del usuario admin
        base_dn (str, optional): DN base para la b√∫squeda
        max_results (int, optional): N√∫mero m√°ximo de resultados por b√∫squeda
        
    Returns:
        Dict[str, Any]: Resultado de la comparaci√≥n ACL con an√°lisis de seguridad
        
    Raises:
        No lanza excepciones, todas las excepciones son capturadas y retornadas
        como parte del diccionario de resultado.
        
    Example:
        >>> resultado = tool_acl_diff("admin", "password123")
        >>> if not resultado["error"]:
        ...     print(f"Diferencias detectadas: {resultado['resultado']['diferencias_detectadas']}")
    """
    try:
        console.print(Panel("üî¥ Iniciando comparaci√≥n de ACLs - An√≥nimo vs Admin LDAP", style="red"))
        
        # Importar el conector LDAP
        from ..tools_base.ldap_connector import LDAPConnector
        
        # Verificar credenciales admin
        if not admin_username or not admin_password:
            return {
                "error": True,
                "mensaje": "Se requieren credenciales de admin para la comparaci√≥n ACL",
                "herramienta": "tool_acl_diff",
                "tipo": "error_credenciales"
            }
        
        # Test 1: Bind an√≥nimo
        console.print(Panel("üîì Test 1: Bind An√≥nimo (permisos m√≠nimos)", style="blue"))
        resultado_anonimo = _test_bind_anonimo(admin_username, admin_password, base_dn, max_results)
        
        # Test 2: Bind admin
        console.print(Panel("üëë Test 2: Bind Admin (permisos m√°ximos)", style="blue"))
        resultado_admin = _test_bind_admin(admin_username, admin_password, base_dn, max_results)
        
        # Test 3: An√°lisis de diferencias
        console.print(Panel("‚öñÔ∏è Test 3: An√°lisis de Diferencias ACL", style="blue"))
        resultado_diferencias = _analizar_diferencias_acl(resultado_anonimo, resultado_admin)
        
        # Test 4: Detecci√≥n de vulnerabilidades
        console.print(Panel("‚ö†Ô∏è Test 4: Detecci√≥n de Vulnerabilidades ACL", style="yellow"))
        resultado_vulnerabilidades = _detectar_vulnerabilidades_acl(resultado_anonimo, resultado_admin, resultado_diferencias)
        
        # An√°lisis de seguridad
        analisis_seguridad = _analizar_seguridad_acl(
            resultado_anonimo, resultado_admin, resultado_diferencias, resultado_vulnerabilidades
        )
        
        # Resultado final
        resultado_completo = {
            "tests": {
                "bind_anonimo": resultado_anonimo,
                "bind_admin": resultado_admin,
                "analisis_diferencias": resultado_diferencias,
                "deteccion_vulnerabilidades": resultado_vulnerabilidades
            },
            "analisis_seguridad": analisis_seguridad,
            "metadata": {
                "herramienta": "tool_acl_diff",
                "tipo": "comparacion_acls",
                "categoria": "reconocimiento_ofensivo",
                "riesgo": "medio",  # Comparaci√≥n de permisos ACL
                "timestamp": "ahora",  # TODO: usar datetime real
                "admin_usuario": admin_username,
                "base_dn": base_dn or "configuracion_sistema"
            }
        }
        
        console.print(Panel("‚úÖ Comparaci√≥n de ACLs completada exitosamente", style="green"))
        
        return {
            "error": False,
            "resultado": resultado_completo,
            "herramienta": "tool_acl_diff",
            "tipo": "comparacion_acls"
        }
        
    except Exception as e:
        logger.error(f"Error en tool_acl_diff: {e}")
        return {
            "error": True,
            "mensaje": f"Error ejecutando comparaci√≥n de ACLs: {str(e)}",
            "herramienta": "tool_acl_diff",
            "tipo": "error_ejecucion"
        }

def _test_bind_anonimo(admin_username: str, admin_password: str, base_dn: str, max_results: int) -> Dict[str, Any]:
    """
    Test de bind an√≥nimo para ver permisos m√≠nimos.
    
    Args:
        admin_username (str): Usuario admin (no usado en bind an√≥nimo)
        admin_password (str): Contrase√±a admin (no usado en bind an√≥nimo)
        base_dn (str): DN base para la b√∫squeda
        max_results (int): N√∫mero m√°ximo de resultados
        
    Returns:
        Dict[str, Any]: Resultado del test de bind an√≥nimo
    """
    try:
        # Crear conexi√≥n LDAP para bind an√≥nimo
        ldap_conn = _crear_conexion_ldap()
        
        # Intentar bind an√≥nimo
        if ldap_conn.connect():
            # Realizar b√∫squedas an√≥nimas
            resultado_busqueda = _realizar_busquedas_anonimas(ldap_conn, base_dn, max_results)
            
            return {
                "estado": "exitoso",
                "tipo_bind": "anonimo",
                "usuario": "anonymous",
                "conexion": True,
                "resultados_busqueda": resultado_busqueda,
                "total_objetos": _contar_total_objetos(resultado_busqueda),
                "permisos": _evaluar_permisos_anonimos(resultado_busqueda),
                "metodo_autenticacion": "anonymous_bind",
                "vulnerabilidad": "Bind an√≥nimo permitido"
            }
        else:
            return {
                "estado": "fallido",
                "tipo_bind": "anonimo",
                "usuario": "anonymous",
                "conexion": False,
                "resultados_busqueda": {},
                "total_objetos": 0,
                "permisos": "sin_acceso",
                "metodo_autenticacion": "anonymous_bind",
                "vulnerabilidad": "Bind an√≥nimo denegado"
            }
            
    except Exception as e:
        return {
            "estado": "error",
            "tipo_bind": "anonimo",
            "usuario": "anonymous",
            "conexion": False,
            "resultados_busqueda": {},
            "total_objetos": 0,
            "permisos": "error",
            "metodo_autenticacion": "anonymous_bind",
            "vulnerabilidad": f"Error en bind an√≥nimo: {str(e)}"
        }

def _test_bind_admin(admin_username: str, admin_password: str, base_dn: str, max_results: int) -> Dict[str, Any]:
    """
    Test de bind admin para ver permisos m√°ximos.
    
    Args:
        admin_username (str): Usuario admin para autenticaci√≥n
        admin_password (str): Contrase√±a del usuario admin
        base_dn (str): DN base para la b√∫squeda
        max_results (int): N√∫mero m√°ximo de resultados
        
    Returns:
        Dict[str, Any]: Resultado del test de bind admin
    """
    try:
        # Crear conexi√≥n LDAP para bind admin
        ldap_conn = _crear_conexion_ldap()
        
        # Intentar bind admin
        if ldap_conn.connect(username=admin_username, password=admin_password):
            # Realizar b√∫squedas como admin
            resultado_busqueda = _realizar_busquedas_admin(ldap_conn, base_dn, max_results)
            
            return {
                "estado": "exitoso",
                "tipo_bind": "admin",
                "usuario": admin_username,
                "conexion": True,
                "resultados_busqueda": resultado_busqueda,
                "total_objetos": _contar_total_objetos(resultado_busqueda),
                "permisos": _evaluar_permisos_admin(resultado_busqueda),
                "metodo_autenticacion": "simple_bind",
                "vulnerabilidad": "Bind admin exitoso"
            }
        else:
            return {
                "estado": "fallido",
                "tipo_bind": "admin",
                "usuario": admin_username,
                "conexion": False,
                "resultados_busqueda": {},
                "total_objetos": 0,
                "permisos": "sin_acceso",
                "metodo_autenticacion": "simple_bind",
                "vulnerabilidad": "Credenciales admin inv√°lidas o acceso denegado"
            }
            
    except Exception as e:
        return {
            "estado": "error",
            "tipo_bind": "admin",
            "usuario": admin_username,
            "conexion": False,
            "resultados_busqueda": {},
            "total_objetos": 0,
            "permisos": "error",
            "metodo_autenticacion": "simple_bind",
            "vulnerabilidad": f"Error en bind admin: {str(e)}"
        }

def _crear_conexion_ldap():
    """
    Crea una nueva conexi√≥n LDAP.
    
    Returns:
        LDAPConnector: Instancia del conector LDAP
    """
    from ..tools_base.ldap_connector import LDAPConnector
    return LDAPConnector()

def _realizar_busquedas_anonimas(ldap_conn, base_dn: str, max_results: int) -> Dict[str, Any]:
    """
    Realiza b√∫squedas an√≥nimas para evaluar permisos m√≠nimos.
    
    Args:
        ldap_conn: Conexi√≥n LDAP
        base_dn (str): DN base para la b√∫squeda
        max_results (int): N√∫mero m√°ximo de resultados
        
    Returns:
        Dict[str, Any]: Resultados de las b√∫squedas an√≥nimas
    """
    if not base_dn:
        base_dn = "dc=meli,dc=com"  # TODO: obtener de configuraci√≥n
    
    resultados = {}
    
    try:
        # B√∫squeda de usuarios
        usuarios = ldap_conn.search(base_dn, "(objectClass=person)")
        if usuarios and len(usuarios) > max_results:
            usuarios = usuarios[:max_results]
        resultados["usuarios"] = usuarios or []
        
        # B√∫squeda de grupos
        grupos = ldap_conn.search(base_dn, "(objectClass=groupOfNames)")
        if grupos and len(grupos) > max_results:
            grupos = grupos[:max_results]
        resultados["grupos"] = grupos or []
        
        # B√∫squeda de objetos del sistema
        objetos_sistema = ldap_conn.search(base_dn, "(objectClass=*)")
        if objetos_sistema and len(objetos_sistema) > max_results:
            objetos_sistema = objetos_sistema[:max_results]
        resultados["objetos_sistema"] = objetos_sistema or []
        
        # B√∫squeda de atributos sensibles
        atributos_sensibles = ldap_conn.search(base_dn, "(|(userPassword=*)(shadowLastChange=*)(pwdLastSet=*))")
        if atributos_sensibles and len(atributos_sensibles) > max_results:
            atributos_sensibles = atributos_sensibles[:max_results]
        resultados["atributos_sensibles"] = atributos_sensibles or []
        
    except Exception as e:
        logger.error(f"Error en b√∫squedas an√≥nimas: {e}")
        resultados = {
            "usuarios": [],
            "grupos": [],
            "objetos_sistema": [],
            "atributos_sensibles": []
        }
    
    return resultados

def _realizar_busquedas_admin(ldap_conn, base_dn: str, max_results: int) -> Dict[str, Any]:
    """
    Realiza b√∫squedas como admin para evaluar permisos m√°ximos.
    
    Args:
        ldap_conn: Conexi√≥n LDAP
        base_dn (str): DN base para la b√∫squeda
        max_results (int): N√∫mero m√°ximo de resultados
        
    Returns:
        Dict[str, Any]: Resultados de las b√∫squedas como admin
    """
    if not base_dn:
        base_dn = "dc=meli,dc=com"  # TODO: obtener de configuraci√≥n
    
    resultados = {}
    
    try:
        # B√∫squeda de usuarios (admin deber√≠a ver m√°s)
        usuarios = ldap_conn.search(base_dn, "(objectClass=person)")
        if usuarios and len(usuarios) > max_results:
            usuarios = usuarios[:max_results]
        resultados["usuarios"] = usuarios or []
        
        # B√∫squeda de grupos (admin deber√≠a ver m√°s)
        grupos = ldap_conn.search(base_dn, "(objectClass=groupOfNames)")
        if grupos and len(grupos) > max_results:
            grupos = grupos[:max_results]
        resultados["grupos"] = grupos or []
        
        # B√∫squeda de objetos del sistema (admin deber√≠a ver m√°s)
        objetos_sistema = ldap_conn.search(base_dn, "(objectClass=*)")
        if objetos_sistema and len(objetos_sistema) > max_results:
            objetos_sistema = objetos_sistema[:max_results]
        resultados["objetos_sistema"] = objetos_sistema or []
        
        # B√∫squeda de atributos sensibles (admin deber√≠a ver m√°s)
        atributos_sensibles = ldap_conn.search(base_dn, "(|(userPassword=*)(shadowLastChange=*)(pwdLastSet=*))")
        if atributos_sensibles and len(atributos_sensibles) > max_results:
            atributos_sensibles = atributos_sensibles[:max_results]
        resultados["atributos_sensibles"] = atributos_sensibles or []
        
        # B√∫squedas adicionales solo para admin
        configuracion = ldap_conn.search(base_dn, "(objectClass=olcGlobal)")
        if configuracion and len(configuracion) > max_results:
            configuracion = configuracion[:max_results]
        resultados["configuracion"] = configuracion or []
        
    except Exception as e:
        logger.error(f"Error en b√∫squedas admin: {e}")
        resultados = {
            "usuarios": [],
            "grupos": [],
            "objetos_sistema": [],
            "atributos_sensibles": [],
            "configuracion": []
        }
    
    return resultados

def _contar_total_objetos(resultados_busqueda: Dict[str, Any]) -> int:
    """
    Cuenta el total de objetos en los resultados de b√∫squeda.
    
    Args:
        resultados_busqueda (Dict[str, Any]): Resultados de b√∫squeda
        
    Returns:
        int: Total de objetos encontrados
    """
    total = 0
    for categoria, objetos in resultados_busqueda.items():
        if isinstance(objetos, list):
            total += len(objetos)
    return total

def _evaluar_permisos_anonimos(resultados_busqueda: Dict[str, Any]) -> str:
    """
    Eval√∫a los permisos del bind an√≥nimo bas√°ndose en los resultados.
    
    Args:
        resultados_busqueda (Dict[str, Any]): Resultados de b√∫squeda an√≥nima
        
    Returns:
        str: Nivel de permisos evaluado
    """
    total_objetos = _contar_total_objetos(resultados_busqueda)
    
    if total_objetos == 0:
        return "sin_acceso"
    elif total_objetos <= 10:
        return "acceso_limitado"
    elif total_objetos <= 50:
        return "acceso_moderado"
    elif total_objetos <= 100:
        return "acceso_amplio"
    else:
        return "acceso_excesivo"

def _evaluar_permisos_admin(resultados_busqueda: Dict[str, Any]) -> str:
    """
    Eval√∫a los permisos del bind admin bas√°ndose en los resultados.
    
    Args:
        resultados_busqueda (Dict[str, Any]): Resultados de b√∫squeda admin
        
    Returns:
        str: Nivel de permisos evaluado
    """
    total_objetos = _contar_total_objetos(resultados_busqueda)
    
    if total_objetos == 0:
        return "sin_acceso"
    elif total_objetos <= 50:
        return "acceso_limitado"
    elif total_objetos <= 200:
        return "acceso_moderado"
    elif total_objetos <= 500:
        return "acceso_amplio"
    else:
        return "acceso_completo"

def _analizar_diferencias_acl(resultado_anonimo: Dict, resultado_admin: Dict) -> Dict[str, Any]:
    """
    Analiza las diferencias entre los permisos an√≥nimos y admin.
    
    Args:
        resultado_anonimo (Dict): Resultado del test de bind an√≥nimo
        resultado_admin (Dict): Resultado del test de bind admin
        
    Returns:
        Dict[str, Any]: An√°lisis de diferencias ACL
    """
    try:
        # Extraer informaci√≥n b√°sica
        permisos_anonimo = resultado_anonimo.get("permisos", "desconocido")
        permisos_admin = resultado_admin.get("permisos", "desconocido")
        total_anonimo = resultado_anonimo.get("total_objetos", 0)
        total_admin = resultado_admin.get("total_objetos", 0)
        
        # Calcular diferencias
        diferencia_objetos = total_admin - total_objetos
        diferencia_porcentual = (diferencia_objetos / total_admin * 100) if total_admin > 0 else 0
        
        # An√°lisis de categor√≠as espec√≠ficas
        diferencias_categoria = _analizar_diferencias_por_categoria(
            resultado_anonimo.get("resultados_busqueda", {}),
            resultado_admin.get("resultados_busqueda", {})
        )
        
        # Evaluar nivel de riesgo
        if total_anonimo > 0 and total_anonimo >= total_admin * 0.8:
            riesgo = "alto"
            descripcion = "Bind an√≥nimo tiene acceso casi igual al admin (CR√çTICO)"
        elif total_anonimo > 0 and total_anonimo >= total_admin * 0.5:
            riesgo = "medio"
            descripcion = "Bind an√≥nimo tiene acceso significativo"
        elif total_anonimo > 0 and total_anonimo < total_admin * 0.5:
            riesgo = "bajo"
            descripcion = "Bind an√≥nimo tiene acceso limitado"
        else:
            riesgo = "bajo"
            descripcion = "Bind an√≥nimo sin acceso (seguro)"
        
        return {
            "estado": "completado",
            "permisos_anonimo": permisos_anonimo,
            "permisos_admin": permisos_admin,
            "total_anonimo": total_anonimo,
            "total_admin": total_admin,
            "diferencia_objetos": diferencia_objetos,
            "diferencia_porcentual": round(diferencia_porcentual, 2),
            "diferencias_categoria": diferencias_categoria,
            "riesgo": riesgo,
            "descripcion": descripcion,
            "vulnerabilidad": _identificar_vulnerabilidad_acl(permisos_anonimo, permisos_admin, total_anonimo, total_admin)
        }
        
    except Exception as e:
        return {
            "estado": "error",
            "permisos_anonimo": "error",
            "permisos_admin": "error",
            "total_anonimo": 0,
            "total_admin": 0,
            "diferencia_objetos": 0,
            "diferencia_porcentual": 0,
            "diferencias_categoria": {},
            "riesgo": "desconocido",
            "descripcion": f"Error analizando diferencias: {str(e)}",
            "vulnerabilidad": "Error en an√°lisis"
        }

def _analizar_diferencias_por_categoria(resultados_anonimo: Dict, resultados_admin: Dict) -> Dict[str, Any]:
    """
    Analiza las diferencias por categor√≠a espec√≠fica.
    
    Args:
        resultados_anonimo (Dict): Resultados an√≥nimos por categor√≠a
        resultados_admin (Dict): Resultados admin por categor√≠a
        
    Returns:
        Dict[str, Any]: Diferencias por categor√≠a
    """
    diferencias = {}
    
    categorias = ["usuarios", "grupos", "objetos_sistema", "atributos_sensibles"]
    
    for categoria in categorias:
        anonimo = resultados_anonimo.get(categoria, [])
        admin = resultados_admin.get(categoria, [])
        
        if isinstance(anonimo, list) and isinstance(admin, list):
            total_anonimo = len(anonimo)
            total_admin = len(admin)
            diferencia = total_admin - total_anonimo
            
            diferencias[categoria] = {
                "anonimo": total_anonimo,
                "admin": total_admin,
                "diferencia": diferencia,
                "porcentaje": round((total_anonimo / total_admin * 100) if total_admin > 0 else 0, 2)
            }
    
    return diferencias

def _identificar_vulnerabilidad_acl(permisos_anonimo: str, permisos_admin: str, total_anonimo: int, total_admin: int) -> str:
    """
    Identifica vulnerabilidades bas√°ndose en la comparaci√≥n de permisos ACL.
    
    Args:
        permisos_anonimo (str): Permisos del bind an√≥nimo
        permisos_admin (str): Permisos del bind admin
        total_anonimo (int): Total de objetos vistos por an√≥nimo
        total_admin (int): Total de objetos vistos por admin
        
    Returns:
        str: Vulnerabilidad identificada
    """
    if total_anonimo == 0:
        return "Configuraci√≥n segura - sin acceso an√≥nimo"
    elif total_anonimo >= total_admin * 0.8:
        return "CR√çTICO: Bind an√≥nimo con acceso casi igual al admin"
    elif total_anonimo >= total_admin * 0.5:
        return "ALTO: Bind an√≥nimo con acceso significativo"
    elif total_anonimo >= total_admin * 0.2:
        return "MEDIO: Bind an√≥nimo con acceso moderado"
    else:
        return "BAJO: Bind an√≥nimo con acceso limitado"

def _detectar_vulnerabilidades_acl(resultado_anonimo: Dict, resultado_admin: Dict, 
                                 resultado_diferencias: Dict) -> Dict[str, Any]:
    """
    Detecta vulnerabilidades espec√≠ficas en la configuraci√≥n ACL.
    
    Args:
        resultado_anonimo (Dict): Resultado del test de bind an√≥nimo
        resultado_admin (Dict): Resultado del test de bind admin
        resultado_diferencias (Dict): Resultado del an√°lisis de diferencias
        
    Returns:
        Dict[str, Any]: Resultado de la detecci√≥n de vulnerabilidades
    """
    try:
        vulnerabilidades = []
        riesgos = []
        
        # Verificar si ambos binds fueron exitosos
        if (resultado_anonimo.get("estado") == "exitoso" and 
            resultado_admin.get("estado") == "exitoso"):
            
            # An√°lisis de diferencias de objetos
            diferencia_porcentual = resultado_diferencias.get("diferencia_porcentual", 0)
            if diferencia_porcentual < 20:
                vulnerabilidades.append("Bind an√≥nimo con acceso casi igual al admin")
                riesgos.append("Posible escalaci√≥n de privilegios")
            
            # An√°lisis de atributos sensibles
            atributos_anonimo = resultado_anonimo.get("resultados_busqueda", {}).get("atributos_sensibles", [])
            if len(atributos_anonimo) > 0:
                vulnerabilidades.append("Atributos sensibles accesibles an√≥nimamente")
                riesgos.append("Informaci√≥n sensible expuesta")
            
            # An√°lisis de configuraci√≥n
            config_admin = resultado_admin.get("resultados_busqueda", {}).get("configuracion", [])
            config_anonimo = resultado_anonimo.get("resultados_busqueda", {}).get("configuracion", [])
            if len(config_anonimo) > 0:
                vulnerabilidades.append("Configuraci√≥n del sistema accesible an√≥nimamente")
                riesgos.append("Informaci√≥n de configuraci√≥n expuesta")
        
        # An√°lisis de permisos excesivos
        permisos_anonimo = resultado_anonimo.get("permisos", "desconocido")
        if permisos_anonimo in ["acceso_amplio", "acceso_excesivo"]:
            vulnerabilidades.append("Bind an√≥nimo con permisos excesivos")
            riesgos.append("Acceso an√≥nimo no restringido")
        
        return {
            "estado": "completado",
            "vulnerabilidades": vulnerabilidades,
            "riesgos": riesgos,
            "total_vulnerabilidades": len(vulnerabilidades),
            "total_riesgos": len(riesgos),
            "riesgo": "alto" if vulnerabilidades else "bajo",
            "descripcion": f"Se detectaron {len(vulnerabilidades)} vulnerabilidades y {len(riesgos)} riesgos"
        }
        
    except Exception as e:
        return {
            "estado": "error",
            "vulnerabilidades": [],
            "riesgos": [],
            "total_vulnerabilidades": 0,
            "total_riesgos": 0,
            "riesgo": "desconocido",
            "descripcion": f"Error detectando vulnerabilidades: {str(e)}"
        }

def _analizar_seguridad_acl(resultado_anonimo: Dict, resultado_admin: Dict, 
                           resultado_diferencias: Dict, resultado_vulnerabilidades: Dict) -> Dict[str, Any]:
    """
    Analiza la seguridad de la configuraci√≥n ACL.
    
    Args:
        resultado_anonimo (Dict): Resultado del test de bind an√≥nimo
        resultado_admin (Dict): Resultado del test de bind admin
        resultado_diferencias (Dict): Resultado del an√°lisis de diferencias
        resultado_vulnerabilidades (Dict): Resultado de la detecci√≥n de vulnerabilidades
        
    Returns:
        Dict[str, Any]: An√°lisis de seguridad
    """
    analisis = {
        "riesgos_detectados": [],
        "vulnerabilidades_potenciales": [],
        "recomendaciones": [],
        "nivel_riesgo": "bajo",
        "configuracion_actual": "desconocida"
    }
    
    # An√°lisis de bind an√≥nimo
    if resultado_anonimo.get("estado") == "exitoso":
        permisos_anonimo = resultado_anonimo.get("permisos", "desconocido")
        total_anonimo = resultado_anonimo.get("total_objetos", 0)
        
        if permisos_anonimo in ["acceso_amplio", "acceso_excesivo"]:
            analisis["riesgos_detectados"].append("Bind an√≥nimo con permisos excesivos")
            analisis["vulnerabilidades_potenciales"].append("Informaci√≥n sensible accesible an√≥nimamente")
            analisis["nivel_riesgo"] = "alto"
            analisis["recomendaciones"].append("Restringir permisos del bind an√≥nimo")
        elif permisos_anonimo in ["acceso_moderado"]:
            analisis["riesgos_detectados"].append("Bind an√≥nimo con permisos moderados")
            analisis["nivel_riesgo"] = "medio"
            analisis["recomendaciones"].append("Revisar si el acceso an√≥nimo es necesario")
        
        if total_anonimo > 0:
            analisis["configuracion_actual"] = f"Bind an√≥nimo con acceso a {total_anonimo} objetos"
    
    # An√°lisis de bind admin
    if resultado_admin.get("estado") == "exitoso":
        permisos_admin = resultado_admin.get("permisos", "desconocido")
        total_admin = resultado_admin.get("total_objetos", 0)
        
        if permisos_admin == "acceso_completo":
            analisis["configuracion_actual"] += f", Admin con acceso completo a {total_admin} objetos"
        else:
            analisis["recomendaciones"].append("Verificar permisos del usuario admin")
    
    # An√°lisis de diferencias
    if resultado_diferencias.get("riesgo") == "alto":
        analisis["riesgos_detectados"].append("Diferencia cr√≠tica en permisos ACL")
        analisis["vulnerabilidades_potenciales"].append("Bind an√≥nimo con acceso excesivo")
        analisis["nivel_riesgo"] = "alto"
        analisis["recomendaciones"].append("Revisar configuraci√≥n de ACLs LDAP")
    
    # An√°lisis de vulnerabilidades
    if resultado_vulnerabilidades.get("total_vulnerabilidades") > 0:
        analisis["riesgos_detectados"].extend(resultado_vulnerabilidades.get("riesgos", []))
        analisis["vulnerabilidades_potenciales"].extend(resultado_vulnerabilidades.get("vulnerabilidades", []))
        analisis["nivel_riesgo"] = "alto"
        analisis["recomendaciones"].append("Investigar y corregir vulnerabilidades detectadas")
    
    # Recomendaciones generales
    if analisis["nivel_riesgo"] == "alto":
        analisis["recomendaciones"].append("Revisar configuraci√≥n de ACLs LDAP inmediatamente")
        analisis["recomendaciones"].append("Implementar pol√≠ticas de acceso estrictas")
    elif analisis["nivel_riesgo"] == "medio":
        analisis["recomendaciones"].append("Revisar configuraci√≥n de permisos LDAP")
        analisis["recomendaciones"].append("Considerar restricciones adicionales")
    
    analisis["recomendaciones"].append("Implementar logging de acceso LDAP")
    analisis["recomendaciones"].append("Revisar regularmente permisos de usuarios y grupos")
    analisis["recomendaciones"].append("Considerar deshabilitar bind an√≥nimo si no es necesario")
    
    return analisis

def mostrar_resultado_acl_diff(resultado: Dict[str, Any]):
    """
    Muestra el resultado de la comparaci√≥n ACL de manera formateada.
    
    Args:
        resultado (Dict[str, Any]): Resultado de tool_acl_diff
    """
    if resultado.get("error"):
        console.print(Panel(f"‚ùå Error: {resultado['mensaje']}", style="red"))
        return
    
    data = resultado["resultado"]
    tests = data["tests"]
    analisis_seguridad = data["analisis_seguridad"]
    
    # T√≠tulo principal
    console.print(Panel("üîê COMPARACI√ìN DE ACLs - AN√ìNIMO vs ADMIN LDAP", style="bold red"))
    console.print()
    
    # Mostrar cada test individualmente con detalles
    console.print(Panel("üß™ DETALLES DE CADA PRUEBA REALIZADA", style="bold blue"))
    console.print()
    
    # Test 1: Bind An√≥nimo
    test_anonimo = tests["bind_anonimo"]
    console.print(Panel("üîì PRUEBA 1: Bind An√≥nimo (permisos m√≠nimos)", style="cyan"))
    console.print(f"   üìä Estado: {test_anonimo['estado'].upper()}")
    console.print(f"   üîê Tipo Bind: {test_anonimo['tipo_bind']}")
    console.print(f"   üë§ Usuario: {test_anonimo['usuario']}")
    console.print(f"   üîå Conexi√≥n: {'‚úÖ Activa' if test_anonimo['conexion'] else '‚ùå Fallida'}")
    console.print(f"   üîç Total Objetos: {test_anonimo['total_objetos']}")
    console.print(f"   üîë Permisos: {test_anonimo['permisos']}")
    console.print(f"   üîí M√©todo: {test_anonimo['metodo_autenticacion']}")
    console.print(f"   ‚ö†Ô∏è Vulnerabilidad: {test_anonimo['vulnerabilidad']}")
    console.print()
    
    # Test 2: Bind Admin
    test_admin = tests["bind_admin"]
    console.print(Panel("üëë PRUEBA 2: Bind Admin (permisos m√°ximos)", style="cyan"))
    console.print(f"   üìä Estado: {test_admin['estado'].upper()}")
    console.print(f"   üîê Tipo Bind: {test_admin['tipo_bind']}")
    console.print(f"   üë§ Usuario: {test_admin['usuario']}")
    console.print(f"   üîå Conexi√≥n: {'‚úÖ Activa' if test_admin['conexion'] else '‚ùå Fallida'}")
    console.print(f"   üîç Total Objetos: {test_admin['total_objetos']}")
    console.print(f"   üîë Permisos: {test_admin['permisos']}")
    console.print(f"   üîí M√©todo: {test_admin['metodo_autenticacion']}")
    console.print(f"   ‚ö†Ô∏è Vulnerabilidad: {test_admin['vulnerabilidad']}")
    console.print()
    
    # Test 3: An√°lisis de Diferencias
    test_diferencias = tests["analisis_diferencias"]
    console.print(Panel("‚öñÔ∏è PRUEBA 3: An√°lisis de Diferencias ACL", style="cyan"))
    console.print(f"   üìä Estado: {test_diferencias['estado'].upper()}")
    console.print(f"   üîë Permisos An√≥nimo: {test_diferencias['permisos_anonimo']}")
    console.print(f"   üîë Permisos Admin: {test_diferencias['permisos_admin']}")
    console.print(f"   üìä Total An√≥nimo: {test_diferencias['total_anonimo']}")
    console.print(f"   üìä Total Admin: {test_diferencias['total_admin']}")
    console.print(f"   üìä Diferencia: {test_diferencias['diferencia_objetos']} objetos")
    console.print(f"   üìä Diferencia %: {test_diferencias['diferencia_porcentual']}%")
    console.print(f"   üö® Riesgo: {test_diferencias['riesgo'].upper()}")
    console.print(f"   üìù Descripci√≥n: {test_diferencias['descripcion']}")
    console.print(f"   ‚ö†Ô∏è Vulnerabilidad: {test_diferencias['vulnerabilidad']}")
    console.print()
    
    # Mostrar diferencias por categor√≠a
    if test_diferencias.get("diferencias_categoria"):
        console.print(Panel("üìã DIFERENCIAS POR CATEGOR√çA", style="bold yellow"))
        for categoria, info in test_diferencias["diferencias_categoria"].items():
            console.print(f"   üîç {categoria.title()}:")
            console.print(f"      An√≥nimo: {info['anonimo']} | Admin: {info['admin']} | Diferencia: {info['diferencia']} | %: {info['porcentaje']}%")
        console.print()
    
    # Test 4: Detecci√≥n de Vulnerabilidades
    test_vulnerabilidades = tests["deteccion_vulnerabilidades"]
    console.print(Panel("‚ö†Ô∏è PRUEBA 4: Detecci√≥n de Vulnerabilidades ACL", style="cyan"))
    console.print(f"   üìä Estado: {test_vulnerabilidades['estado'].upper()}")
    console.print(f"   üö® Vulnerabilidades: {test_vulnerabilidades['total_vulnerabilidades']}")
    console.print(f"   ‚ö†Ô∏è Riesgos: {test_vulnerabilidades['total_riesgos']}")
    console.print(f"   üö® Riesgo: {test_vulnerabilidades['riesgo'].upper()}")
    console.print(f"   üìù Descripci√≥n: {test_vulnerabilidades['descripcion']}")
    
    if test_vulnerabilidades.get("vulnerabilidades"):
        console.print("   üìã Vulnerabilidades espec√≠ficas:")
        for vuln in test_vulnerabilidades["vulnerabilidades"]:
            console.print(f"      - {vuln}")
    
    if test_vulnerabilidades.get("riesgos"):
        console.print("   üìã Riesgos espec√≠ficos:")
        for riesgo in test_vulnerabilidades["riesgos"]:
            console.print(f"      - {riesgo}")
    console.print()
    
    # Resumen de resultados
    console.print(Panel("üìã RESUMEN DE RESULTADOS", style="bold green"))
    total_tests = len(tests)
    tests_exitosos = sum(1 for test in tests.values() if test.get('estado') == 'exitoso' or test.get('estado') == 'completado')
    tests_fallidos = sum(1 for test in tests.values() if test.get('estado') == 'fallido')
    tests_error = sum(1 for test in tests.values() if test.get('estado') == 'error')
    
    console.print(f"   üß™ Total de pruebas: {total_tests}")
    console.print(f"   ‚úÖ Exitosas/Completadas: {tests_exitosos}")
    console.print(f"   ‚ùå Fallidas: {tests_fallidos}")
    console.print(f"   üí• Con error: {tests_error}")
    console.print()
    
    # An√°lisis de seguridad
    console.print(Panel("üîí AN√ÅLISIS DE SEGURIDAD", style="bold red"))
    console.print(f"   üö® Nivel de Riesgo: {analisis_seguridad['nivel_riesgo'].upper()}")
    console.print(f"   ‚ö†Ô∏è Riesgos Detectados: {len(analisis_seguridad['riesgos_detectados'])}")
    console.print(f"   üí• Vulnerabilidades: {len(analisis_seguridad['vulnerabilidades_potenciales'])}")
    console.print(f"   üîß Configuraci√≥n Actual: {analisis_seguridad['configuracion_actual']}")
    console.print()
    
    # Riesgos detectados
    if analisis_seguridad["riesgos_detectados"]:
        console.print(Panel("üö® RIESGOS DETECTADOS", style="bold red"))
        for i, riesgo in enumerate(analisis_seguridad["riesgos_detectados"], 1):
            console.print(f"   {i}. {riesgo}")
        console.print()
    
    # Vulnerabilidades potenciales
    if analisis_seguridad["vulnerabilidades_potenciales"]:
        console.print(Panel("üí• VULNERABILIDADES POTENCIALES", style="bold red"))
        for i, vuln in enumerate(analisis_seguridad["vulnerabilidades_potenciales"], 1):
            console.print(f"   {i}. {vuln}")
        console.print()
    
    # Recomendaciones
    if analisis_seguridad["recomendaciones"]:
        console.print(Panel("üí° RECOMENDACIONES DE SEGURIDAD", style="bold yellow"))
        for i, rec in enumerate(analisis_seguridad["recomendaciones"], 1):
            console.print(f"   {i}. {rec}")
        console.print()
    
    # Conclusi√≥n
    nivel_riesgo = analisis_seguridad["nivel_riesgo"]
    if nivel_riesgo == "alto":
        estilo_conclusion = "bold red"
        emoji = "üö®"
        mensaje = "ALTO RIESGO - Requiere atenci√≥n inmediata"
    elif nivel_riesgo == "medio":
        estilo_conclusion = "bold yellow"
        emoji = "‚ö†Ô∏è"
        mensaje = "RIESGO MEDIO - Requiere atenci√≥n pronto"
    else:
        estilo_conclusion = "bold green"
        emoji = "‚úÖ"
        mensaje = "RIESGO BAJO - Sistema relativamente seguro"
    
    console.print(Panel(f"{emoji} CONCLUSI√ìN: {mensaje}", style=estilo_conclusion)) 