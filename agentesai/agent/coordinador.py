"""
Agente Coordinador - Maneja el enrutamiento y la toma de decisiones
"""

import logging
from typing import Dict, Any, Optional
from rich.console import Console
from rich.panel import Panel

console = Console()
logger = logging.getLogger(__name__)

class AgenteCoordinador:
    """
    Agente que coordina entre el ejecutor y el generador.
    
    El AgenteCoordinador es el cerebro del sistema de agentes. Su responsabilidad
    principal es analizar las consultas de los usuarios y decidir quÃ© agente debe
    manejarlas. Puede decidir entre:
    
    1. Usar herramientas existentes (enviar al AgenteEjecutor)
    2. Generar nuevas herramientas (enviar al AgenteGenerador)
    
    Atributos:
        herramientas_disponibles (set): Conjunto de nombres de herramientas disponibles
        historial_consultas (list): Lista de consultas procesadas para auditorÃ­a
        
    MÃ©todos principales:
        - analizar_consulta(): Analiza una consulta y toma una decisiÃ³n
        - registrar_herramienta(): Registra una nueva herramienta disponible
        - registrar_consulta(): Registra una consulta procesada
        - obtener_estadisticas(): Obtiene estadÃ­sticas del coordinador
        
    Example:
        >>> coordinador = AgenteCoordinador()
        >>> decision = coordinador.analizar_consulta("Â¿quiÃ©n soy?")
        >>> print(decision["accion"])  # "ejecutar"
        >>> print(decision["agente"])  # "ejecutor"
    """
    
    def __init__(self):
        self.herramientas_disponibles = set()
        self.historial_consultas = []
        
    def analizar_consulta(self, consulta: str) -> Dict[str, Any]:
        """
        Analiza la consulta del usuario y decide quÃ© agente debe manejarla.
        
        Esta funciÃ³n es el cerebro del sistema de coordinaciÃ³n. Analiza el texto de la consulta
        y determina si puede ser respondida con herramientas existentes o si necesita
        generar una nueva herramienta.
        
        Args:
            consulta (str): La consulta del usuario (ej: "Â¿quiÃ©n soy?", "Â¿quÃ© grupos tengo?")
            
        Returns:
            Dict[str, Any]: Diccionario con la decisiÃ³n tomada:
                - accion: "ejecutar" o "generar"
                - agente: "ejecutor" o "generador"
                - herramienta: nombre de la herramienta (si accion="ejecutar")
                - tipo_herramienta: tipo de herramienta a generar (si accion="generar")
                - consulta: la consulta original
        """
        console.print(Panel(f"ğŸ§  Analizando consulta: {consulta}", style="blue"))
        
        # LÃ³gica de anÃ¡lisis basada en patrones de texto
        # TODO: En el futuro, esto se puede mejorar usando IA para anÃ¡lisis semÃ¡ntico
        if self._puede_responder_directamente(consulta):
            return {
                "accion": "ejecutar",
                "agente": "ejecutor",
                "herramienta": self._identificar_herramienta(consulta),
                "consulta": consulta
            }
        else:
            return {
                "accion": "generar",
                "agente": "generador",
                "consulta": consulta,
                "tipo_herramienta": self._determinar_tipo_herramienta(consulta)
            }
    
    def _puede_responder_directamente(self, consulta: str) -> bool:
        """
        Determina si la consulta puede ser respondida con herramientas existentes.
        
        Esta funciÃ³n implementa un sistema de reconocimiento de patrones para identificar
        consultas que el sistema ya sabe manejar. Utiliza una lista predefinida de
        patrones de texto para hacer la comparaciÃ³n.
        
        Args:
            consulta (str): La consulta del usuario en texto plano
            
        Returns:
            bool: True si la consulta puede ser respondida directamente, False si necesita
                  generaciÃ³n de nueva herramienta
                  
        Note:
            Los patrones incluyen variaciones en espaÃ±ol e inglÃ©s para mayor flexibilidad.
            En el futuro, esto se puede mejorar con NLP o embeddings semÃ¡nticos.
        """
        consulta_lower = consulta.lower()
        
        # Lista de patrones de consultas que el sistema ya sabe manejar
        # Cada patrÃ³n representa una funcionalidad implementada
        patrones_conocidos = [
            # Herramientas obligatorias
            "quiÃ©n soy", "quien soy", "who am i",        # get_current_user_info
            "quÃ© grupos tengo", "que grupos tengo", "what groups",  # get_user_groups
            "reset", "reseteo", "reiniciar",             # reset_system
            
            # Herramientas adicionales de seguridad ofensiva
            "listar usuarios", "lista usuarios", "todos los usuarios", "list users", "all users",  # list_all_users
            "buscar usuarios", "usuarios por departamento", "search users", "users by department",  # search_users_by_department
            "estructura ldap", "estructura del directorio", "ldap structure", "directory structure",  # analyze_ldap_structure
            
            # Herramientas ofensivas
            "rootdse", "root dse", "rootdse info", "root dse info",  # tool_rootdse_info
            "anÃ¡lisis rootdse", "analisis rootdse", "rootdse analysis",  # tool_rootdse_info
            "informaciÃ³n servidor", "server info", "ldap info", "ldap server info",  # tool_rootdse_info
            
            # EnumeraciÃ³n anÃ³nima
            "enumeraciÃ³n anÃ³nima", "enumeracion anonima", "anonymous enum",  # tool_anonymous_enum
            "bind anÃ³nimo", "bind anonimo", "anonymous bind",  # tool_anonymous_enum
            "usuarios anÃ³nimos", "usuarios anonimos", "anonymous users",  # tool_anonymous_enum
            "enumerar usuarios", "enumerar grupos", "list users groups",  # tool_anonymous_enum
            
            # Test STARTTLS
            "starttls", "start tls", "tls test", "test tls",  # tool_starttls_test
            "test seguridad", "seguridad tls", "tls security",  # tool_starttls_test
            "downgrade tls", "tls downgrade", "handshake tls"  # tool_starttls_test
        ]
        
        # Verifica si alguno de los patrones estÃ¡ presente en la consulta
        return any(patron in consulta_lower for patron in patrones_conocidos)
    
    def _identificar_herramienta(self, consulta: str) -> Optional[str]:
        """
        Identifica quÃ© herramienta usar para la consulta.
        
        Esta funciÃ³n mapea consultas de texto a herramientas especÃ­ficas disponibles
        en el sistema. Incluye tanto herramientas obligatorias como adicionales.
        
        Args:
            consulta (str): La consulta del usuario
            
        Returns:
            Optional[str]: Nombre de la herramienta a usar, o None si no encuentra match
        """
        consulta_lower = consulta.lower()
        
        # Herramientas obligatorias
        if any(palabra in consulta_lower for palabra in ["quiÃ©n soy", "quien soy", "who am i"]):
            return "get_current_user_info"
        elif any(palabra in consulta_lower for palabra in ["quÃ© grupos", "que grupos", "what groups"]):
            return "get_user_groups"
        elif any(palabra in consulta_lower for palabra in ["reset", "reseteo", "reiniciar"]):
            return "reset_system"
        
        # Herramientas adicionales de seguridad ofensiva
        elif any(palabra in consulta_lower for palabra in ["listar usuarios", "lista usuarios", "todos los usuarios", "list users", "all users"]):
            return "list_all_users"
        elif any(palabra in consulta_lower for palabra in ["buscar usuarios", "usuarios por departamento", "search users", "users by department"]):
            return "search_users_by_department"
        elif any(palabra in consulta_lower for palabra in ["estructura ldap", "estructura del directorio", "ldap structure", "directory structure"]):
            return "analyze_ldap_structure"
        
        # Herramientas ofensivas
        elif any(palabra in consulta_lower for palabra in ["rootdse", "root dse", "rootdse info", "root dse info", "anÃ¡lisis rootdse", "analisis rootdse", "rootdse analysis", "informaciÃ³n servidor", "server info", "ldap info", "ldap server info"]):
            return "tool_rootdse_info"
        elif any(palabra in consulta_lower for palabra in ["enumeraciÃ³n anÃ³nima", "enumeracion anonima", "anonymous enum", "bind anÃ³nimo", "bind anonimo", "anonymous bind", "usuarios anÃ³nimos", "usuarios anonimos", "anonymous users", "enumerar usuarios", "enumerar grupos", "list users groups"]):
            return "tool_anonymous_enum"
        elif any(palabra in consulta_lower for palabra in ["starttls", "start tls", "tls test", "test tls", "test seguridad", "seguridad tls", "tls security", "downgrade tls", "tls downgrade", "handshake tls"]):
            return "tool_starttls_test"
        
        return None
    
    def _determinar_tipo_herramienta(self, consulta: str) -> str:
        """Determina quÃ© tipo de herramienta generar"""
        consulta_lower = consulta.lower()
        
        if any(palabra in consulta_lower for palabra in ["grupos", "groups"]):
            return "ldap_query"
        elif any(palabra in consulta_lower for palabra in ["usuarios", "users"]):
            return "ldap_query"
        elif any(palabra in consulta_lower for palabra in ["departamento", "department"]):
            return "ldap_query"
        
        return "generic_query"
    
    def registrar_herramienta(self, nombre: str):
        """Registra una nueva herramienta disponible"""
        self.herramientas_disponibles.add(nombre)
        console.print(Panel(f"âœ… Nueva herramienta registrada: {nombre}", style="green"))
    
    def registrar_consulta(self, consulta: str, resultado: str):
        """Registra una consulta y su resultado"""
        self.historial_consultas.append({
            "consulta": consulta,
            "resultado": resultado,
            "timestamp": "ahora"  # TODO: usar datetime real
        })
    
    def obtener_estadisticas(self) -> Dict[str, Any]:
        """Obtiene estadÃ­sticas del sistema"""
        return {
            "herramientas_disponibles": len(self.herramientas_disponibles),
            "consultas_procesadas": len(self.historial_consultas),
            "herramientas": list(self.herramientas_disponibles)
        } 